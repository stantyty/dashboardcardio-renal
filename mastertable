-- Set session timeout and use the appropriate database and schema
ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 144000;
USE DATABASE "AANALYTICS_PROD";
USE SCHEMA "WORKSPACE";

-- Set variables for date calculations (if needed in future)
SET LATEST_SERVICE_DATE = (
    SELECT LAST_DAY(MAX(SERVICE_DATE), 'month') 
    FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX"
);

SET START_DATE = (
    SELECT DATE_TRUNC('month', DATEADD(month, -11, $LATEST_SERVICE_DATE))
);

-- Create the claim-level master table
CREATE TABLE Project_Odyssey_Master_Claim_Level AS

-- Step 1: Prepare diagnosis code lists for the cohort
WITH
ASCVD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE ASCVD = 'Y'
),
CKD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE CKD = 'Y'
),
CKD_3_4_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "CKD3&4" = 'Y'
),
MI_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE MI = 'Y'
),
AMI_T1_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "AMI Type 1" = 'Y'
),
HF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "Heart Failure" = 'Y'
),
HFpEF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "HFpEF" = 'Y'
),
-- Combine all diagnosis codes into one list
ALL_CODES AS (
  SELECT DIAG_CD FROM ASCVD_CODE
  UNION
  SELECT DIAG_CD FROM CKD_CODE
  UNION
  SELECT DIAG_CD FROM CKD_3_4_CODE
  UNION
  SELECT DIAG_CD FROM MI_CODE
  UNION
  SELECT DIAG_CD FROM AMI_T1_CODE
  UNION
  SELECT DIAG_CD FROM HF_CODE
  UNION
  SELECT DIAG_CD FROM HFpEF_CODE
),

-- Step 2: Identify the patient cohort based on diagnosis codes in ALL_CODES
patient_cohort AS (
    SELECT DISTINCT patient_id
    FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX"
    WHERE diagnosis_code IN (SELECT DIAG_CD FROM ALL_CODES)
),

-- Step 3: Retrieve relevant claims data including HCP information
relevant_claims AS (
    SELECT
        c.patient_id,
        c.claim_id,
        c.diagnosis_code,
        c.SERVICE_DATE,
        c.PATIENT_BIRTH_YEAR,
        c.PATIENT_GENDER,
        c.NNI_RENDERING_PR_SPEC_GROUP,
        c.NNI_RENDERING_PR_SPEC_NAME,
        c.NNI_RENDERING_CUSTOMER_ID,
        c.RENDERING_PROVIDER_ZIP AS zip,
        c.RENDERING_PROVIDER_STATE AS state
    FROM
        "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX" c
    WHERE
        c.patient_id IN (SELECT patient_id FROM patient_cohort)
),

-- Step 4: Load the broader diagnosis grouping reference table
DX_GROUPING AS (
    SELECT
        DIAG_CD,
        Name AS grouping_name
    FROM
        "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_ICD_GROUPING_FLAGS_TOTAL_112620244"
),

-- Step 5: Join relevant claims with DX_GROUPING to get grouping names
claims_with_groupings AS (
    SELECT
        rc.*,
        dg.grouping_name
    FROM
        relevant_claims rc
        LEFT JOIN DX_GROUPING dg ON rc.diagnosis_code = dg.DIAG_CD
),

-- Step 6: For each patient, collect unique grouping names into Total_Dx_GROUPING_FLAG
patient_diagnosis_list AS (
    SELECT
        patient_id,
        LISTAGG(DISTINCT grouping_name, ', ') AS total_dx_grouping_flag
    FROM
        claims_with_groupings
    WHERE
        grouping_name IS NOT NULL  -- Exclude null grouping names
    GROUP BY
        patient_id
),

-- Step 7: Retrieve patient demographic information
patient_demographics AS (
    SELECT
        s.patient_id,
        s.Access_To_Medication_Score_1 AS access_to_medication,
        s.Food_Insecurity_Score_1 AS food_insecurity,
        s.Access_To_Care_Score_1 AS access_to_care,
        s.Housing_Instability_Score_1 AS housing_instability,
        s.Sdoh_Total_1 AS total_risk,
        s.ethnic_ind AS ethnicity,
        s.EDUC_ind AS education
    FROM
        "LAAD_PROD"."RPT_LAAD"."S_LAAD_CONS_PATIENT_DEMOGRAPHICS_EXP" s
    WHERE
        s.patient_id IN (SELECT patient_id FROM patient_cohort)
),

-- Step 8: Retrieve HCP affiliation information
hcp_affiliations AS (
    SELECT
        customer_id,
        -- Include necessary fields from the HCP affiliation table
        affiliation_field1,
        affiliation_field2
    FROM
        "AANALYTICS_PROD"."WORKSPACE"."PROJECT_ODYSSEY_HCP_AFFILIATION_11262024"
),

-- Step 9: Combine claims data with grouping names, demographics, and HCP affiliation
claim_master_data AS (
    SELECT
        cwg.patient_id,
        cwg.claim_id,
        cwg.diagnosis_code,
        cwg.SERVICE_DATE,
        cwg.PATIENT_BIRTH_YEAR AS birth_year,
        cwg.PATIENT_GENDER AS gender,
        cwg.NNI_RENDERING_PR_SPEC_GROUP,
        cwg.NNI_RENDERING_PR_SPEC_NAME,
        cwg.NNI_RENDERING_CUSTOMER_ID,
        cwg.zip,
        cwg.state,
        cwg.grouping_name AS claim_grouping_name,
        pd.access_to_medication,
        pd.food_insecurity,
        pd.access_to_care,
        pd.housing_instability,
        pd.total_risk,
        pd.ethnicity,
        pd.education,
        pdl.total_dx_grouping_flag,
        hcp.affiliation_field1,
        hcp.affiliation_field2,
        -- Per-claim diagnosis flags based on original code lists
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM ASCVD_CODE) THEN 1 ELSE 0 END AS claim_ascvd_flag,
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM CKD_CODE) THEN 1 ELSE 0 END AS claim_ckd_flag,
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM CKD_3_4_CODE) THEN 1 ELSE 0 END AS claim_ckd34_flag,
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM MI_CODE) THEN 1 ELSE 0 END AS claim_mi_flag,
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM AMI_T1_CODE) THEN 1 ELSE 0 END AS claim_ami_t1_flag,
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM HF_CODE) THEN 1 ELSE 0 END AS claim_hf_flag,
        CASE WHEN cwg.diagnosis_code IN (SELECT DIAG_CD FROM HFpEF_CODE) THEN 1 ELSE 0 END AS claim_hfpef_flag
    FROM
        claims_with_groupings cwg
        LEFT JOIN patient_demographics pd ON cwg.patient_id = pd.patient_id
        LEFT JOIN patient_diagnosis_list pdl ON cwg.patient_id = pdl.patient_id
        LEFT JOIN hcp_affiliations hcp ON cwg.NNI_RENDERING_CUSTOMER_ID = hcp.customer_id
)

-- Final Step: Select all data from the combined dataset
SELECT
    *
FROM
    claim_master_data;
