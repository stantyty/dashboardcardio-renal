Table 1: "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CV_RX" 
Relevant Field names: 
Patient_ID
Claim_ID
Service_Date
Om_Product_Therapeutic_Class
Om_Product_Therapeutic_Sub_Class
Om_Product_Brand
Claim_Type = "PD" (required filter)
Source_of_Business

Table 2: "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX"
Relevant Field names: 
Patient_ID
Claim_ID
Service_Date (Filter Min Service Date >=2018)
Diagnosis_Code
Diagnosis_Description
Datasource_ID (This represent if the claim is coming from a Hospital (Hx) or Outpatient (Mx))

We are trying to generate a data table for the belowing format, and including the source of buisness and datasource_id. The line of threpy meaning the order of that patient got prescribed of certain treatment(Theraputic Sub-class, Theraputic class, and Om_Product_Brand), if the patient got prescribed multiple treatments in the same service_date, then the items shall be included as same line and seperate with commas.


			Brand 					Theraputic Sub-class					Theraputic Class				
Patient ID	Start Dignoses	TA	Line of Therpy 1	Line of Therpy 2	Line of Therpy 3	Line of Therpy 4	Line of Therpy 5	Line of Therpy 1	Line of Therpy 2	Line of Therpy 3	Line of Therpy 4	Line of Therpy 5	Line of Therpy 1	Line of Therpy 2	Line of Therpy 3	Line of Therpy 4	Line of Therpy 5
123	1/2/2018	ASCVD	Product 1, Product 2					Beta blockers					Beta blockers				
123	3/2/2/24	Heart Failure															
123	2/24/2022	AMI		

The TAs can be filtered and generated using below CTE. We do not need CKD_3_4 and AMI_T1_code in this case


-- Step 1: Prepare diagnosis code lists for the cohort
WITH
ASCVD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE ASCVD = 'Y'
),
CKD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE CKD = 'Y'
),
CKD_3_4_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "CKD3&4" = 'Y'
),
MI_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE MI = 'Y'
),
AMI_T1_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "AMI Type 1" = 'Y'
),
HF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "Heart Failure" = 'Y'
),
HFpEF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "HFpEF" = 'Y'
),
-- Combine all diagnosis codes into one list
ALL_CODES AS (
  SELECT DIAG_CD FROM ASCVD_CODE
  UNION
  SELECT DIAG_CD FROM CKD_CODE
  UNION
  SELECT DIAG_CD FROM CKD_3_4_CODE
  UNION
  SELECT DIAG_CD FROM MI_CODE
  UNION
  SELECT DIAG_CD FROM AMI_T1_CODE
  UNION
  SELECT DIAG_CD FROM HF_CODE
  UNION
  SELECT DIAG_CD FROM HFpEF_CODE
)




ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 144000;
USE DATABASE "AANALYTICS_PROD";
USE SCHEMA "WORKSPACE";

WITH
-- Step 1: Define code sets for each TA
ASCVD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE ASCVD = 'Y'
),
CKD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE CKD = 'Y'
),
MI_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE MI = 'Y'
),
HF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "Heart Failure" = 'Y'
),
HFpEF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "HFpEF" = 'Y'
),
ALL_CODES AS (
  SELECT DIAG_CD, 'ASCVD' AS TA FROM ASCVD_CODE
  UNION ALL
  SELECT DIAG_CD, 'CKD' AS TA FROM CKD_CODE
  UNION ALL
  SELECT DIAG_CD, 'MI' AS TA FROM MI_CODE
  UNION ALL
  SELECT DIAG_CD, 'Heart Failure' AS TA FROM HF_CODE
  UNION ALL
  SELECT DIAG_CD, 'HFpEF' AS TA FROM HFpEF_CODE
),

-- Step 2: Filter diagnosis claims (â‰¥2018) and map to TAs
diagnosis_data AS (
  SELECT 
    d.Patient_ID,
    d.Claim_ID,
    d.Service_Date,
    d.Diagnosis_Code,
    a.TA
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX" d
  JOIN ALL_CODES a ON d.Diagnosis_Code = a.DIAG_CD
  WHERE d.Service_Date >= DATE '2018-01-01'
),

-- Step 3: For each patient and TA, find the earliest diagnosis date
patient_ta_start AS (
  SELECT
    Patient_ID,
    TA,
    MIN(Service_Date) AS Start_Diagnosis_Date
  FROM diagnosis_data
  GROUP BY Patient_ID, TA
),

-- Step 4: Retrieve Rx claims with Claim_Type='PD' on or after Start_Diagnosis_Date
rx_data AS (
  SELECT
    r.Patient_ID,
    pts.TA,
    r.Service_Date,
    r.Om_Product_Therapeutic_Class,
    r.Om_Product_Therapeutic_Sub_Class,
    r.Om_Product_Brand,
    r.Source_of_Business
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CV_RX" r
  JOIN patient_ta_start pts ON r.Patient_ID = pts.Patient_ID
  WHERE r.Claim_Type = 'PD'
    AND r.Service_Date >= pts.Start_Diagnosis_Date
),

-- Step 5: Derive line_of_therapy for each category separately

-- 5a: Brand Lines
brand_lines AS (
  SELECT
    Patient_ID,
    TA,
    Service_Date,
    LISTAGG(DISTINCT Om_Product_Brand, ', ') AS line_brands,
    LISTAGG(DISTINCT Source_of_Business, ', ') AS line_brand_sources
  FROM rx_data
  GROUP BY Patient_ID, TA, Service_Date
),
brand_ranked AS (
  SELECT
    bl.*,
    DENSE_RANK() OVER(PARTITION BY bl.Patient_ID, bl.TA ORDER BY bl.Service_Date) AS brand_line_num
  FROM brand_lines bl
),
brand_pivot AS (
  SELECT
    Patient_ID,
    TA,
    MAX(CASE WHEN brand_line_num=1 THEN line_brands END) AS brand_line_1,
    MAX(CASE WHEN brand_line_num=2 THEN line_brands END) AS brand_line_2,
    MAX(CASE WHEN brand_line_num=3 THEN line_brands END) AS brand_line_3,
    MAX(CASE WHEN brand_line_num=4 THEN line_brands END) AS brand_line_4,
    MAX(CASE WHEN brand_line_num=5 THEN line_brands END) AS brand_line_5,

    MAX(CASE WHEN brand_line_num=1 THEN line_brand_sources END) AS brand_line_1_sources,
    MAX(CASE WHEN brand_line_num=2 THEN line_brand_sources END) AS brand_line_2_sources,
    MAX(CASE WHEN brand_line_num=3 THEN line_brand_sources END) AS brand_line_3_sources,
    MAX(CASE WHEN brand_line_num=4 THEN line_brand_sources END) AS brand_line_4_sources,
    MAX(CASE WHEN brand_line_num=5 THEN line_brand_sources END) AS brand_line_5_sources
  FROM brand_ranked
  GROUP BY Patient_ID, TA
),

-- 5b: Sub-Class Lines
subclass_lines AS (
  SELECT
    Patient_ID,
    TA,
    Service_Date,
    LISTAGG(DISTINCT Om_Product_Therapeutic_Sub_Class, ', ') AS line_sub_classes,
    LISTAGG(DISTINCT Source_of_Business, ', ') AS line_subclass_sources
  FROM rx_data
  GROUP BY Patient_ID, TA, Service_Date
),
subclass_ranked AS (
  SELECT
    sl.*,
    DENSE_RANK() OVER(PARTITION BY sl.Patient_ID, sl.TA ORDER BY sl.Service_Date) AS subclass_line_num
  FROM subclass_lines sl
),
subclass_pivot AS (
  SELECT
    Patient_ID,
    TA,
    MAX(CASE WHEN subclass_line_num=1 THEN line_sub_classes END) AS subclass_line_1,
    MAX(CASE WHEN subclass_line_num=2 THEN line_sub_classes END) AS subclass_line_2,
    MAX(CASE WHEN subclass_line_num=3 THEN line_sub_classes END) AS subclass_line_3,
    MAX(CASE WHEN subclass_line_num=4 THEN line_sub_classes END) AS subclass_line_4,
    MAX(CASE WHEN subclass_line_num=5 THEN line_sub_classes END) AS subclass_line_5,

    MAX(CASE WHEN subclass_line_num=1 THEN line_subclass_sources END) AS subclass_line_1_sources,
    MAX(CASE WHEN subclass_line_num=2 THEN line_subclass_sources END) AS subclass_line_2_sources,
    MAX(CASE WHEN subclass_line_num=3 THEN line_subclass_sources END) AS subclass_line_3_sources,
    MAX(CASE WHEN subclass_line_num=4 THEN line_subclass_sources END) AS subclass_line_4_sources,
    MAX(CASE WHEN subclass_line_num=5 THEN line_subclass_sources END) AS subclass_line_5_sources
  FROM subclass_ranked
  GROUP BY Patient_ID, TA
),

-- 5c: Class Lines
class_lines AS (
  SELECT
    Patient_ID,
    TA,
    Service_Date,
    LISTAGG(DISTINCT Om_Product_Therapeutic_Class, ', ') AS line_classes,
    LISTAGG(DISTINCT Source_of_Business, ', ') AS line_class_sources
  FROM rx_data
  GROUP BY Patient_ID, TA, Service_Date
),
class_ranked AS (
  SELECT
    cl.*,
    DENSE_RANK() OVER(PARTITION BY cl.Patient_ID, cl.TA ORDER BY cl.Service_Date) AS class_line_num
  FROM class_lines cl
),
class_pivot AS (
  SELECT
    Patient_ID,
    TA,
    MAX(CASE WHEN class_line_num=1 THEN line_classes END) AS class_line_1,
    MAX(CASE WHEN class_line_num=2 THEN line_classes END) AS class_line_2,
    MAX(CASE WHEN class_line_num=3 THEN line_classes END) AS class_line_3,
    MAX(CASE WHEN class_line_num=4 THEN line_classes END) AS class_line_4,
    MAX(CASE WHEN class_line_num=5 THEN line_classes END) AS class_line_5,

    MAX(CASE WHEN class_line_num=1 THEN line_class_sources END) AS class_line_1_sources,
    MAX(CASE WHEN class_line_num=2 THEN line_class_sources END) AS class_line_2_sources,
    MAX(CASE WHEN class_line_num=3 THEN line_class_sources END) AS class_line_3_sources,
    MAX(CASE WHEN class_line_num=4 THEN line_class_sources END) AS class_line_4_sources,
    MAX(CASE WHEN class_line_num=5 THEN line_class_sources END) AS class_line_5_sources
  FROM class_ranked
  GROUP BY Patient_ID, TA
)

-- Step 6: Combine everything with the start diagnosis date
SELECT
  pts.Patient_ID,
  pts.Start_Diagnosis_Date,
  pts.TA,
  bp.brand_line_1,
  bp.brand_line_2,
  bp.brand_line_3,
  bp.brand_line_4,
  bp.brand_line_5,
  bp.brand_line_1_sources,
  bp.brand_line_2_sources,
  bp.brand_line_3_sources,
  bp.brand_line_4_sources,
  bp.brand_line_5_sources,

  sp.subclass_line_1,
  sp.subclass_line_2,
  sp.subclass_line_3,
  sp.subclass_line_4,
  sp.subclass_line_5,
  sp.subclass_line_1_sources,
  sp.subclass_line_2_sources,
  sp.subclass_line_3_sources,
  sp.subclass_line_4_sources,
  sp.subclass_line_5_sources,

  cp.class_line_1,
  cp.class_line_2,
  cp.class_line_3,
  cp.class_line_4,
  cp.class_line_5,
  cp.class_line_1_sources,
  cp.class_line_2_sources,
  cp.class_line_3_sources,
  cp.class_line_4_sources,
  cp.class_line_5_sources
FROM patient_ta_start pts
LEFT JOIN brand_pivot bp ON pts.Patient_ID = bp.Patient_ID AND pts.TA = bp.TA
LEFT JOIN subclass_pivot sp ON pts.Patient_ID = sp.Patient_ID AND pts.TA = sp.TA
LEFT JOIN class_pivot cp ON pts.Patient_ID = cp.Patient_ID AND pts.TA = cp.TA;


Now we want to restructure the table and introduce more filters, avoid missing filters, I'll list all filters:
1. Only include patients whose CV Rx date is later than their first corresponding TA Diagnosis date(TA range is ASCVD, CKD, MI, HF, HFePF: RX> DX date
2. In addition to #1, only include the patients that: for the date diff between Rx Date and Dx Date, date difference should be <=90 days
3. Only look at the claims within 1 year after their first CV Rx (look forward 1 year). So only include claims for a patient that is within 1 year of this patient's first CV Rx for the corresponding TA.
4. Only consider Paid claims only:Claim Type = 'PD'
5. Only include record that Source of Business != 'C'

Query/Table structure Changes:
1. now introduce one new field to the resuting table:Treatment_Granularity_Level. The values will be "Om_Product_Therapeutic_Class", "Om_Product_Therapeutic_Sub_Class" or "Om_Product_Brand". So for one each patient, we can have three rows of line#1 - line# 5 treatment, but for three different levels. This can avoid making the table wider and easy to implement on tableau.
2. Again, each line of treatments(for three levels), we may have multiple treatment within the same service date, in that case, we sort these multiple Line of Treatments by athebathical sort, and seperate using commas to put into one cell.
3. As we added a one year look ahead filter, please add a field of the date one Year look forward(1 year + first cv rx date for that TA) into the resulting table for verfication purposes. Please suggest a field name and name it.

So to clarify, in the updated table, one patient could have up to 15 rows(3 levels of treatment granularities times 5 TAs = 15, if applicable, not all patients will associate with 5 TAs). The final fields we should have are:
Patient Id,	Min CV Rx Date,	Min_Service_Date, Date one year look forward,	TA,	Treatment_Granularity_Level,	Line # 1,	Line#2,	Line#3,	Line #4, 	Line #5

Rename these fields and make it easy to understand for professionals.

Now, go ahead to generate the updated query. 



ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 144000;
USE DATABASE "AANALYTICS_PROD";
USE SCHEMA "WORKSPACE";

-- ****************************************************
-- Step 1: Define TA code sets and identify earliest TA diagnosis date
-- ****************************************************
WITH ASCVD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE ASCVD = 'Y'
),
CKD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE CKD = 'Y'
),
MI_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE MI = 'Y'
),
HF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "Heart Failure" = 'Y'
),
HFpEF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "HFpEF" = 'Y'
),
ALL_CODES AS (
  SELECT DIAG_CD, 'ASCVD' AS TA FROM ASCVD_CODE
  UNION ALL
  SELECT DIAG_CD, 'CKD' AS TA FROM CKD_CODE
  UNION ALL
  SELECT DIAG_CD, 'MI' AS TA FROM MI_CODE
  UNION ALL
  SELECT DIAG_CD, 'Heart Failure' AS TA FROM HF_CODE
  UNION ALL
  SELECT DIAG_CD, 'HFpEF' AS TA FROM HFpEF_CODE
),

-- Diagnosis data filtered for TAs and from 2018 onwards
diagnosis_data AS (
  SELECT 
    d.Patient_ID,
    d.Service_Date,
    a.TA
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX" d
  JOIN ALL_CODES a ON d.Diagnosis_Code = a.DIAG_CD
  WHERE d.Service_Date >= DATE '2018-01-01'
),

-- Earliest TA diagnosis date per patient-TA
patient_ta_diag_start AS (
  SELECT
    Patient_ID,
    TA,
    MIN(Service_Date) AS FIRST_TA_DIAGNOSIS_DATE
  FROM diagnosis_data
  GROUP BY Patient_ID, TA
),

-- ****************************************************
-- Step 2: Find earliest CV Rx date after earliest TA diagnosis date (within 90 days)
-- Only consider PD and exclude source_of_business = 'C' here or later. We can apply filters now for efficiency.
-- ****************************************************
rx_data_initial AS (
  SELECT
    r.Patient_ID,
    r.Service_Date,
    r.Om_Product_Therapeutic_Class,
    r.Om_Product_Therapeutic_Sub_Class,
    r.Om_Product_Brand,
    r.Source_of_Business,
    pts.TA,
    pts.FIRST_TA_DIAGNOSIS_DATE
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CV_RX" r
  JOIN patient_ta_diag_start pts ON r.Patient_ID = pts.Patient_ID
  WHERE r.Claim_Type = 'PD'               -- Only Paid claims
    AND r.Source_of_Business != 'C'        -- Exclude Source_of_Business = 'C'
    AND r.Service_Date > pts.FIRST_TA_DIAGNOSIS_DATE -- Rx must be later than diagnosis date
    AND DATEDIFF('day', pts.FIRST_TA_DIAGNOSIS_DATE, r.Service_Date) <= 90 -- Within 90 days
),

-- Earliest CV Rx date per patient-TA that meets the criteria
patient_ta_earliest_rx AS (
  SELECT
    Patient_ID,
    TA,
    MIN(Service_Date) AS FIRST_CV_RX_DATE
  FROM rx_data_initial
  GROUP BY Patient_ID, TA
),

-- ****************************************************
-- Step 3: Apply the 1-year look forward window
-- We only consider Rx claims that occur within 1 year after FIRST_CV_RX_DATE.
-- ****************************************************
final_rx_data AS (
  SELECT
    r.Patient_ID,
    r.Service_Date,
    r.Om_Product_Therapeutic_Class,
    r.Om_Product_Therapeutic_Sub_Class,
    r.Om_Product_Brand,
    r.Source_of_Business,
    pte.TA,
    pte.FIRST_CV_RX_DATE,
    ptd.FIRST_TA_DIAGNOSIS_DATE,
    DATEADD(year, 1, pte.FIRST_CV_RX_DATE) AS ONE_YEAR_LOOK_FORWARD_DATE
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CV_RX" r
  JOIN patient_ta_diag_start ptd ON r.Patient_ID = ptd.Patient_ID
  JOIN patient_ta_earliest_rx pte ON r.Patient_ID = pte.Patient_ID AND ptd.TA = pte.TA
  WHERE r.Claim_Type = 'PD'
    AND r.Source_of_Business != 'C'
    AND r.Service_Date >= pte.FIRST_CV_RX_DATE
    AND r.Service_Date < DATEADD(year, 1, pte.FIRST_CV_RX_DATE)  -- within 1 year after FIRST_CV_RX_DATE
    AND ptd.TA = pte.TA
),

-- ****************************************************
-- Step 4: Generate lines of therapy for each category (Brand, Sub-Class, Class)
-- Determine line_of_therapy by distinct service dates in ascending order.
-- For multiple treatments on the same date, alphabetically sort them.
-- We'll do three separate sets and then UNION them in a final step.
-- ****************************************************

-- Helper function: To get alphabetically sorted, distinct lists, we can use a subquery approach:
-- For each category, we first group by Patient_ID, TA, Service_Date, collect distinct values sorted.

-- BRAND lines
brand_lines AS (
  SELECT
    Patient_ID,
    TA,
    Service_Date,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE,
    ONE_YEAR_LOOK_FORWARD_DATE,
    LISTAGG(brand_val, ', ') AS line_brands
  FROM (
    SELECT DISTINCT
      fr.Patient_ID,
      fr.TA,
      fr.Service_Date,
      fr.FIRST_TA_DIAGNOSIS_DATE,
      fr.FIRST_CV_RX_DATE,
      fr.ONE_YEAR_LOOK_FORWARD_DATE,
      fr.Om_Product_Brand AS brand_val
    FROM final_rx_data fr
    WHERE fr.Om_Product_Brand IS NOT NULL
  ) t
  GROUP BY Patient_ID, TA, Service_Date, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE, ONE_YEAR_LOOK_FORWARD_DATE
),
brand_ranked AS (
  SELECT
    bl.*,
    DENSE_RANK() OVER(PARTITION BY bl.Patient_ID, bl.TA ORDER BY bl.Service_Date) AS line_num
  FROM brand_lines bl
),
brand_pivot AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE,
    ONE_YEAR_LOOK_FORWARD_DATE,
    'Om_Product_Brand' AS TREATMENT_LEVEL,
    MAX(CASE WHEN line_num=1 THEN line_brands END) AS LINE_OF_THERAPY_1,
    MAX(CASE WHEN line_num=2 THEN line_brands END) AS LINE_OF_THERAPY_2,
    MAX(CASE WHEN line_num=3 THEN line_brands END) AS LINE_OF_THERAPY_3,
    MAX(CASE WHEN line_num=4 THEN line_brands END) AS LINE_OF_THERAPY_4,
    MAX(CASE WHEN line_num=5 THEN line_brands END) AS LINE_OF_THERAPY_5
  FROM brand_ranked
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE, ONE_YEAR_LOOK_FORWARD_DATE
),

-- SUB-CLASS lines
subclass_lines AS (
  SELECT
    Patient_ID,
    TA,
    Service_Date,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE,
    ONE_YEAR_LOOK_FORWARD_DATE,
    LISTAGG(subclass_val, ', ') AS line_sub_classes
  FROM (
    SELECT DISTINCT
      fr.Patient_ID,
      fr.TA,
      fr.Service_Date,
      fr.FIRST_TA_DIAGNOSIS_DATE,
      fr.FIRST_CV_RX_DATE,
      fr.ONE_YEAR_LOOK_FORWARD_DATE,
      fr.Om_Product_Therapeutic_Sub_Class AS subclass_val
    FROM final_rx_data fr
    WHERE fr.Om_Product_Therapeutic_Sub_Class IS NOT NULL
  ) t
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE, ONE_YEAR_LOOK_FORWARD_DATE, Service_Date
),
subclass_ranked AS (
  SELECT
    sl.*,
    DENSE_RANK() OVER(PARTITION BY sl.Patient_ID, sl.TA ORDER BY sl.Service_Date) AS line_num
  FROM subclass_lines sl
),
subclass_pivot AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE,
    ONE_YEAR_LOOK_FORWARD_DATE,
    'Om_Product_Therapeutic_Sub_Class' AS TREATMENT_LEVEL,
    MAX(CASE WHEN line_num=1 THEN line_sub_classes END) AS LINE_OF_THERAPY_1,
    MAX(CASE WHEN line_num=2 THEN line_sub_classes END) AS LINE_OF_THERAPY_2,
    MAX(CASE WHEN line_num=3 THEN line_sub_classes END) AS LINE_OF_THERAPY_3,
    MAX(CASE WHEN line_num=4 THEN line_sub_classes END) AS LINE_OF_THERAPY_4,
    MAX(CASE WHEN line_num=5 THEN line_sub_classes END) AS LINE_OF_THERAPY_5
  FROM subclass_ranked
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE, ONE_YEAR_LOOK_FORWARD_DATE
),

-- CLASS lines
class_lines AS (
  SELECT
    Patient_ID,
    TA,
    Service_Date,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE,
    ONE_YEAR_LOOK_FORWARD_DATE,
    LISTAGG(class_val, ', ') AS line_classes
  FROM (
    SELECT DISTINCT
      fr.Patient_ID,
      fr.TA,
      fr.Service_Date,
      fr.FIRST_TA_DIAGNOSIS_DATE,
      fr.FIRST_CV_RX_DATE,
      fr.ONE_YEAR_LOOK_FORWARD_DATE,
      fr.Om_Product_Therapeutic_Class AS class_val
    FROM final_rx_data fr
    WHERE fr.Om_Product_Therapeutic_Class IS NOT NULL
  ) t
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE, ONE_YEAR_LOOK_FORWARD_DATE, Service_Date
),
class_ranked AS (
  SELECT
    cl.*,
    DENSE_RANK() OVER(PARTITION BY cl.Patient_ID, cl.TA ORDER BY cl.Service_Date) AS line_num
  FROM class_lines cl
),
class_pivot AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE,
    ONE_YEAR_LOOK_FORWARD_DATE,
    'Om_Product_Therapeutic_Class' AS TREATMENT_LEVEL,
    MAX(CASE WHEN line_num=1 THEN line_classes END) AS LINE_OF_THERAPY_1,
    MAX(CASE WHEN line_num=2 THEN line_classes END) AS LINE_OF_THERAPY_2,
    MAX(CASE WHEN line_num=3 THEN line_classes END) AS LINE_OF_THERAPY_3,
    MAX(CASE WHEN line_num=4 THEN line_classes END) AS LINE_OF_THERAPY_4,
    MAX(CASE WHEN line_num=5 THEN line_classes END) AS LINE_OF_THERAPY_5
  FROM class_ranked
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE, ONE_YEAR_LOOK_FORWARD_DATE
)

-- ****************************************************
-- Step 5: Combine all three treatment_level sets into one final result
-- We UNION ALL the three pivoted sets. Each set corresponds to a different TREATMENT_LEVEL.
-- ****************************************************
SELECT
  Patient_ID AS PATIENT_ID,
  FIRST_TA_DIAGNOSIS_DATE AS FIRST_TA_DIAGNOSIS_DATE,
  FIRST_CV_RX_DATE AS FIRST_CV_RX_DATE,
  ONE_YEAR_LOOK_FORWARD_DATE AS ONE_YEAR_LOOK_FORWARD_DATE,
  TA AS THERAPEUTIC_AREA,
  TREATMENT_LEVEL,
  LINE_OF_THERAPY_1,
  LINE_OF_THERAPY_2,
  LINE_OF_THERAPY_3,
  LINE_OF_THERAPY_4,
  LINE_OF_THERAPY_5
FROM brand_pivot

UNION ALL

SELECT
  Patient_ID AS PATIENT_ID,
  FIRST_TA_DIAGNOSIS_DATE AS FIRST_TA_DIAGNOSIS_DATE,
  FIRST_CV_RX_DATE AS FIRST_CV_RX_DATE,
  ONE_YEAR_LOOK_FORWARD_DATE AS ONE_YEAR_LOOK_FORWARD_DATE,
  TA AS THERAPEUTIC_AREA,
  TREATMENT_LEVEL,
  LINE_OF_THERAPY_1,
  LINE_OF_THERAPY_2,
  LINE_OF_THERAPY_3,
  LINE_OF_THERAPY_4,
  LINE_OF_THERAPY_5
FROM subclass_pivot

UNION ALL

SELECT
  Patient_ID AS PATIENT_ID,
  FIRST_TA_DIAGNOSIS_DATE AS FIRST_TA_DIAGNOSIS_DATE,
  FIRST_CV_RX_DATE AS FIRST_CV_RX_DATE,
  ONE_YEAR_LOOK_FORWARD_DATE AS ONE_YEAR_LOOK_FORWARD_DATE,
  TA AS THERAPEUTIC_AREA,
  TREATMENT_LEVEL,
  LINE_OF_THERAPY_1,
  LINE_OF_THERAPY_2,
  LINE_OF_THERAPY_3,
  LINE_OF_THERAPY_4,
  LINE_OF_THERAPY_5
FROM class_pivot;



Based on this, we need to have some updates to the query: 
1. we want the frist rx date based on patient's level only, don't based on TA level anymore. For First DX time, it remains unchanged on patient and TA Level. 
2. we only include the patients that patient's first TA dx is later than 2018-1-1(here, its group by patient and TA). 
3. For the one year look forward, make it a filter, it is means to only include patient with at least 1 year forward window. For example, If we have a patient's first rx date to be yesterday, then it's unnecessary to analyze on this patient for treatment journey.


ALTER SESSION SET STATEMENT_TIMEOUT_IN_SECONDS = 144000;
USE DATABASE "AANALYTICS_PROD";
USE SCHEMA "WORKSPACE";

-- ****************************************************
-- Set variable for the latest service date for the 1-year look forward feasibility check
-- ****************************************************
SET LATEST_SERVICE_DATE = (
    SELECT LAST_DAY(MAX(SERVICE_DATE), 'month') 
    FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX"
);

-- ****************************************************
-- Step 1: Define TA code sets
-- We will determine earliest TA diagnosis date from all claims (no date filter yet).
-- Later we will exclude TAs that don't meet the >=2018-01-01 condition.
-- ****************************************************
WITH ASCVD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE ASCVD = 'Y'
),
CKD_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE CKD = 'Y'
),
MI_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE MI = 'Y'
),
HF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "Heart Failure" = 'Y'
),
HFpEF_CODE AS (
  SELECT DIAG_CD
  FROM "AANALYTICS_PROD"."WORKSPACE"."CIA_CARDIORENALDASHBOARD_DE_PROJECT_ODYSSEY_COHORT_ICD10"
  WHERE "HFpEF" = 'Y'
),
ALL_CODES AS (
  SELECT DIAG_CD, 'ASCVD' AS TA FROM ASCVD_CODE
  UNION ALL
  SELECT DIAG_CD, 'CKD' AS TA FROM CKD_CODE
  UNION ALL
  SELECT DIAG_CD, 'MI' AS TA FROM MI_CODE
  UNION ALL
  SELECT DIAG_CD, 'Heart Failure' AS TA FROM HF_CODE
  UNION ALL
  SELECT DIAG_CD, 'HFpEF' AS TA FROM HFpEF_CODE
),

-- Include all diagnosis claims to find earliest date, no initial date filter here:
diagnosis_data AS (
  SELECT 
    d.Patient_ID,
    d.Service_Date,
    a.TA
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CONSOLIDATED_DX" d
  JOIN ALL_CODES a ON d.Diagnosis_Code = a.DIAG_CD
),

patient_ta_diag_start AS (
  SELECT
    Patient_ID,
    TA,
    MIN(Service_Date) AS FIRST_TA_DIAGNOSIS_DATE
  FROM diagnosis_data
  GROUP BY Patient_ID, TA
),

-- ****************************************************
-- Step 2: Find earliest Rx date at the patient level (not TA level),
-- that meets conditions: Claim_Type='PD', Source_of_Business!='C',
-- Rx date > TA diag date and within 90 days for at least one TA.
-- ****************************************************
rx_candidates AS (
  SELECT DISTINCT
    r.Patient_ID,
    r.Service_Date AS Rx_Date,
    r.Om_Product_Therapeutic_Class,
    r.Om_Product_Therapeutic_Sub_Class,
    r.Om_Product_Brand,
    r.Source_of_Business,
    ptds.TA,
    ptds.FIRST_TA_DIAGNOSIS_DATE
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CV_RX" r
  JOIN patient_ta_diag_start ptds ON r.Patient_ID = ptds.Patient_ID
  WHERE r.Claim_Type = 'PD'
    AND r.Source_of_Business != 'C'
    AND r.Service_Date > ptds.FIRST_TA_DIAGNOSIS_DATE
    AND DATEDIFF('day', ptds.FIRST_TA_DIAGNOSIS_DATE, r.Service_Date) <= 90
),

patient_earliest_rx AS (
  SELECT
    Patient_ID,
    MIN(Rx_Date) AS FIRST_CV_RX_DATE_PATIENT
  FROM rx_candidates
  GROUP BY Patient_ID
),

-- ****************************************************
-- Step 3: 1-year look forward feasibility
-- Only keep patients whose FIRST_CV_RX_DATE_PATIENT <= (LATEST_SERVICE_DATE - 1 year)
-- so we have at least one full year of data post Rx.
-- ****************************************************
filtered_patients AS (
  SELECT
    per.Patient_ID,
    per.FIRST_CV_RX_DATE_PATIENT
  FROM patient_earliest_rx per
  WHERE per.FIRST_CV_RX_DATE_PATIENT <= DATEADD(year, -1, $LATEST_SERVICE_DATE)
),

-- ****************************************************
-- Step 4: Now include only those TAs for patients in filtered_patients
-- BUT we must ensure that FIRST_TA_DIAGNOSIS_DATE >= '2018-01-01' for that TA.
-- If a TA's earliest diagnosis date is before 2018, exclude that TA for that patient.
-- ****************************************************
final_ta_list AS (
  SELECT
    ptds.Patient_ID,
    ptds.TA,
    ptds.FIRST_TA_DIAGNOSIS_DATE
  FROM patient_ta_diag_start ptds
  JOIN filtered_patients fp ON ptds.Patient_ID = fp.Patient_ID
  WHERE ptds.FIRST_TA_DIAGNOSIS_DATE >= DATE '2018-01-01'
),

-- ****************************************************
-- Step 5: Gather final Rx data within 1 year after FIRST_CV_RX_DATE_PATIENT
-- and meet conditions: Claim_Type='PD', Source_of_Business!='C', Rx date >= FIRST_CV_RX_DATE_PATIENT.
-- Only keep claims < FIRST_CV_RX_DATE_PATIENT + 1 year.
-- ****************************************************
final_rx_data AS (
  SELECT
    r.Patient_ID,
    r.Service_Date,
    r.Om_Product_Therapeutic_Class,
    r.Om_Product_Therapeutic_Sub_Class,
    r.Om_Product_Brand,
    r.Source_of_Business,
    ftl.TA,
    ftl.FIRST_TA_DIAGNOSIS_DATE,
    fp.FIRST_CV_RX_DATE_PATIENT,
    DATEADD(year, 1, fp.FIRST_CV_RX_DATE_PATIENT) AS ONE_YEAR_LOOK_FORWARD_DATE
  FROM "LAAD_PROD"."RPT_LAAD"."PTAB_F_LAAD_CV_RX" r
  JOIN final_ta_list ftl ON r.Patient_ID = ftl.Patient_ID
  JOIN filtered_patients fp ON r.Patient_ID = fp.Patient_ID
  WHERE r.Claim_Type = 'PD'
    AND r.Source_of_Business != 'C'
    AND r.Service_Date >= fp.FIRST_CV_RX_DATE_PATIENT
    AND r.Service_Date < DATEADD(year, 1, fp.FIRST_CV_RX_DATE_PATIENT)
),

-- ****************************************************
-- Step 6: Generate lines of therapy for each category (Brand, Sub-Class, Class)
-- If multiple items on the same date, sort alphabetically.
-- We use LISTAGG with ORDER BY for alphabetical sorting.
-- ****************************************************

-- BRAND lines
brand_lines AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE_PATIENT,
    ONE_YEAR_LOOK_FORWARD_DATE,
    Service_Date,
    LISTAGG(DISTINCT Om_Product_Brand, ', ') WITHIN GROUP (ORDER BY Om_Product_Brand) AS line_brands
  FROM final_rx_data
  WHERE Om_Product_Brand IS NOT NULL
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE_PATIENT, ONE_YEAR_LOOK_FORWARD_DATE, Service_Date
),
brand_ranked AS (
  SELECT
    bl.*,
    DENSE_RANK() OVER(PARTITION BY bl.Patient_ID, bl.TA ORDER BY bl.Service_Date) AS line_num
  FROM brand_lines bl
),
brand_pivot AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE_PATIENT,
    ONE_YEAR_LOOK_FORWARD_DATE,
    'Om_Product_Brand' AS TREATMENT_LEVEL,
    MAX(CASE WHEN line_num=1 THEN line_brands END) AS LINE_OF_THERAPY_1,
    MAX(CASE WHEN line_num=2 THEN line_brands END) AS LINE_OF_THERAPY_2,
    MAX(CASE WHEN line_num=3 THEN line_brands END) AS LINE_OF_THERAPY_3,
    MAX(CASE WHEN line_num=4 THEN line_brands END) AS LINE_OF_THERAPY_4,
    MAX(CASE WHEN line_num=5 THEN line_brands END) AS LINE_OF_THERAPY_5
  FROM brand_ranked
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE_PATIENT, ONE_YEAR_LOOK_FORWARD_DATE
),

-- SUB-CLASS lines
subclass_lines AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE_PATIENT,
    ONE_YEAR_LOOK_FORWARD_DATE,
    Service_Date,
    LISTAGG(DISTINCT Om_Product_Therapeutic_Sub_Class, ', ') WITHIN GROUP (ORDER BY Om_Product_Therapeutic_Sub_Class) AS line_sub_classes
  FROM final_rx_data
  WHERE Om_Product_Therapeutic_Sub_Class IS NOT NULL
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE_PATIENT, ONE_YEAR_LOOK_FORWARD_DATE, Service_Date
),
subclass_ranked AS (
  SELECT
    sl.*,
    DENSE_RANK() OVER(PARTITION BY sl.Patient_ID, sl.TA ORDER BY sl.Service_Date) AS line_num
  FROM subclass_lines sl
),
subclass_pivot AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE_PATIENT,
    ONE_YEAR_LOOK_FORWARD_DATE,
    'Om_Product_Therapeutic_Sub_Class' AS TREATMENT_LEVEL,
    MAX(CASE WHEN line_num=1 THEN line_sub_classes END) AS LINE_OF_THERAPY_1,
    MAX(CASE WHEN line_num=2 THEN line_sub_classes END) AS LINE_OF_THERAPY_2,
    MAX(CASE WHEN line_num=3 THEN line_sub_classes END) AS LINE_OF_THERAPY_3,
    MAX(CASE WHEN line_num=4 THEN line_sub_classes END) AS LINE_OF_THERAPY_4,
    MAX(CASE WHEN line_num=5 THEN line_sub_classes END) AS LINE_OF_THERAPY_5
  FROM subclass_ranked
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE_PATIENT, ONE_YEAR_LOOK_FORWARD_DATE
),

-- CLASS lines
class_lines AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE_PATIENT,
    ONE_YEAR_LOOK_FORWARD_DATE,
    Service_Date,
    LISTAGG(DISTINCT Om_Product_Therapeutic_Class, ', ') WITHIN GROUP (ORDER BY Om_Product_Therapeutic_Class) AS line_classes
  FROM final_rx_data
  WHERE Om_Product_Therapeutic_Class IS NOT NULL
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE_PATIENT, ONE_YEAR_LOOK_FORWARD_DATE, Service_Date
),
class_ranked AS (
  SELECT
    cl.*,
    DENSE_RANK() OVER(PARTITION BY cl.Patient_ID, cl.TA ORDER BY cl.Service_Date) AS line_num
  FROM class_lines cl
),
class_pivot AS (
  SELECT
    Patient_ID,
    TA,
    FIRST_TA_DIAGNOSIS_DATE,
    FIRST_CV_RX_DATE_PATIENT,
    ONE_YEAR_LOOK_FORWARD_DATE,
    'Om_Product_Therapeutic_Class' AS TREATMENT_LEVEL,
    MAX(CASE WHEN line_num=1 THEN line_classes END) AS LINE_OF_THERAPY_1,
    MAX(CASE WHEN line_num=2 THEN line_classes END) AS LINE_OF_THERAPY_2,
    MAX(CASE WHEN line_num=3 THEN line_classes END) AS LINE_OF_THERAPY_3,
    MAX(CASE WHEN line_num=4 THEN line_classes END) AS LINE_OF_THERAPY_4,
    MAX(CASE WHEN line_num=5 THEN line_classes END) AS LINE_OF_THERAPY_5
  FROM class_ranked
  GROUP BY Patient_ID, TA, FIRST_TA_DIAGNOSIS_DATE, FIRST_CV_RX_DATE_PATIENT, ONE_YEAR_LOOK_FORWARD_DATE
)

-- ****************************************************
-- Step 7: Combine all three treatment levels into one final result set
-- ****************************************************
SELECT
  Patient_ID AS PATIENT_ID,
  FIRST_TA_DIAGNOSIS_DATE AS FIRST_TA_DIAGNOSIS_DATE,
  FIRST_CV_RX_DATE_PATIENT AS FIRST_CV_RX_DATE,
  ONE_YEAR_LOOK_FORWARD_DATE AS ONE_YEAR_LOOK_FORWARD_DATE,
  TA AS THERAPEUTIC_AREA,
  TREATMENT_LEVEL,
  LINE_OF_THERAPY_1,
  LINE_OF_THERAPY_2,
  LINE_OF_THERAPY_3,
  LINE_OF_THERAPY_4,
  LINE_OF_THERAPY_5
FROM brand_pivot

UNION ALL

SELECT
  Patient_ID AS PATIENT_ID,
  FIRST_TA_DIAGNOSIS_DATE AS FIRST_TA_DIAGNOSIS_DATE,
  FIRST_CV_RX_DATE_PATIENT AS FIRST_CV_RX_DATE,
  ONE_YEAR_LOOK_FORWARD_DATE AS ONE_YEAR_LOOK_FORWARD_DATE,
  TA AS THERAPEUTIC_AREA,
  TREATMENT_LEVEL,
  LINE_OF_THERAPY_1,
  LINE_OF_THERAPY_2,
  LINE_OF_THERAPY_3,
  LINE_OF_THERAPY_4,
  LINE_OF_THERAPY_5
FROM subclass_pivot

UNION ALL

SELECT
  Patient_ID AS PATIENT_ID,
  FIRST_TA_DIAGNOSIS_DATE AS FIRST_TA_DIAGNOSIS_DATE,
  FIRST_CV_RX_DATE_PATIENT AS FIRST_CV_RX_DATE,
  ONE_YEAR_LOOK_FORWARD_DATE AS ONE_YEAR_LOOK_FORWARD_DATE,
  TA AS THERAPEUTIC_AREA,
  TREATMENT_LEVEL,
  LINE_OF_THERAPY_1,
  LINE_OF_THERAPY_2,
  LINE_OF_THERAPY_3,
  LINE_OF_THERAPY_4,
  LINE_OF_THERAPY_5
FROM class_pivot;

